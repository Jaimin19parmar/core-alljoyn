/******************************************************************************
 *    Copyright (c) Open Connectivity Foundation (OCF) and AllJoyn Open
 *    Source Project (AJOSP) Contributors and others.
 *
 *    SPDX-License-Identifier: Apache-2.0
 *
 *    All rights reserved. This program and the accompanying materials are
 *    made available under the terms of the Apache License, Version 2.0
 *    which accompanies this distribution, and is available at
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Copyright (c) Open Connectivity Foundation and Contributors to AllSeen
 *    Alliance. All rights reserved.
 *
 *    Permission to use, copy, modify, and/or distribute this software for
 *    any purpose with or without fee is hereby granted, provided that the
 *    above copyright notice and this permission notice appear in all
 *    copies.
 *
 *    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
 *    WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
 *    WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
 *    AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
 *    DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
 *    PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 *    TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 *    PERFORMANCE OF THIS SOFTWARE.
 ******************************************************************************/

/*
 * Tests for ASACORE-2744 - ProxyBusObject does not support descriptions on pre-16.04 nodes.
 * ProxyBusObject::IntrospectRemoteObject() calls the remote object's Introspect() method.
 * Pre-16.04 implementations of Introspect() do not include descriptions in the returned
 * introspection XML. To obtain descriptions from pre-16.04 nodes, IntrospectWithDescription()
 * has to be called. ASACORE-2744 introduces detection if IntrospectRemoteObject() has been
 * called for a pre-16.04 node and additional handling for these nodes: IntrospectWithDescription()
 * is called for all available description languages and the obtained descriptions are added
 * to the InterfaceDescription of the remote object in the ProxyBusObject.
 */
#include <qcc/platform.h>

#include <vector>
#include <memory>

#include <qcc/String.h>
#include <alljoyn/MsgArg.h>
#include <alljoyn/DBusStd.h>
#include <alljoyn/AllJoynStd.h>
#include <alljoyn/version.h>
#include <alljoyn/Status.h>

#include <gtest/gtest.h>
#include "ajTestCommon.h"
#include <alljoyn/BusAttachment.h>
#include <alljoyn/BusObject.h>
#include <alljoyn/InterfaceDescription.h>
#include <alljoyn/Message.h>
#include <alljoyn/ProxyBusObject.h>
#include <qcc/Debug.h>
#include <qcc/StringSource.h>

using namespace ajn;

static AJ_PCSTR s_mainPath = "/";

static AJ_PCSTR s_xmlSingleInterfaceNoDescriptions =
    /* DTD 1.0 means this is an introspection XML generated by a legacy (pre-16.04) node.
     * 16.04 nodes return DTD 1.1.
     */
    "<!DOCTYPE node PUBLIC \"-//allseen//DTD ALLJOYN Object Introspection 1.0//EN\"\n"
    "\"http://www.allseen.org/alljoyn/introspect-1.0.dtd\">\n"
    "<node>\n"
    "  <interface name=\"org.alljoyn.Bus.TestInterface\">\n"
    "    <property name=\"TestProperty\" type=\"s\" access=\"readwrite\">\n"
    "    </property>\n"
    "  </interface>\n"
    "  <interface name=\"org.freedesktop.DBus.Introspectable\">\n"
    "    <method name=\"Introspect\">\n"
    "      <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "    </method>\n"
    "  </interface>\n"
    "  <interface name=\"org.allseen.Introspectable\">\n"
    "    <method name=\"GetDescriptionLanguages\">\n"
    "      <arg name=\"languageTags\" type=\"as\" direction=\"out\"/>\n"
    "    </method>\n"
    "    <method name=\"IntrospectWithDescription\">\n"
    "      <arg name=\"languageTag\" type=\"s\" direction=\"in\"/>\n"
    "      <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "    </method>\n"
    "    <annotation name=\"org.alljoyn.Bus.Secure\" value=\"off\"/>\n"
    "  </interface>\n"
    "</node>\n";

static AJ_PCSTR s_xmlSingleInterfaceIntrospectWithDescriptionEn =
    "<!DOCTYPE node PUBLIC \"-//allseen//DTD ALLJOYN Object Introspection 1.0//EN\"\n"
    "\"http://www.allseen.org/alljoyn/introspect-1.0.dtd\">\n"
    "<node>\n"
    "  <description language=\"en\">English object description</description>\n"
    "  <interface name=\"org.alljoyn.Bus.TestInterface\">\n"
    "    <description language=\"en\">English interface description</description>\n"
    "    <property name=\"TestProperty\" type=\"s\" access=\"readwrite\">\n"
    "      <description language=\"en\">English property description</description>\n"
    "    </property>\n"
    "  </interface>\n"
    "  <interface name=\"org.freedesktop.DBus.Introspectable\">\n"
    "    <method name=\"Introspect\">\n"
    "      <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "    </method>\n"
    "  </interface>\n"
    "  <interface name=\"org.allseen.Introspectable\">\n"
    "    <method name=\"GetDescriptionLanguages\">\n"
    "      <arg name=\"languageTags\" type=\"as\" direction=\"out\"/>\n"
    "    </method>\n"
    "    <method name=\"IntrospectWithDescription\">\n"
    "      <arg name=\"languageTag\" type=\"s\" direction=\"in\"/>\n"
    "      <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "    </method>\n"
    "    <annotation name=\"org.alljoyn.Bus.Secure\" value=\"off\"/>\n"
    "  </interface>\n"
    "</node>\n";

static AJ_PCSTR s_xmlSingleInterfaceIntrospectWithDescriptionDe =
    "<!DOCTYPE node PUBLIC \"-//allseen//DTD ALLJOYN Object Introspection 1.0//EN\"\n"
    "\"http://www.allseen.org/alljoyn/introspect-1.0.dtd\">\n"
    "<node>\n"
    "  <description language=\"de\">German object description</description>\n"
    "  <interface name=\"org.alljoyn.Bus.TestInterface\">\n"
    "    <description language=\"de\">German interface description</description>\n"
    "    <property name=\"TestProperty\" type=\"s\" access=\"readwrite\">\n"
    "      <description language=\"de\">German property description</description>\n"
    "    </property>\n"
    "  </interface>\n"
    "  <interface name=\"org.freedesktop.DBus.Introspectable\">\n"
    "    <method name=\"Introspect\">\n"
    "      <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "    </method>\n"
    "  </interface>\n"
    "  <interface name=\"org.allseen.Introspectable\">\n"
    "    <method name=\"GetDescriptionLanguages\">\n"
    "      <arg name=\"languageTags\" type=\"as\" direction=\"out\"/>\n"
    "    </method>\n"
    "    <method name=\"IntrospectWithDescription\">\n"
    "      <arg name=\"languageTag\" type=\"s\" direction=\"in\"/>\n"
    "      <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "    </method>\n"
    "    <annotation name=\"org.alljoyn.Bus.Secure\" value=\"off\"/>\n"
    "  </interface>\n"
    "</node>\n";

static AJ_PCSTR s_xmlWithDescriptionInconsistentDe =
    "<!DOCTYPE node PUBLIC \"-//allseen//DTD ALLJOYN Object Introspection 1.0//EN\"\n"
    "\"http://www.allseen.org/alljoyn/introspect-1.0.dtd\">\n"
    "<node>\n"
    "  <description language=\"de\">German object description</description>\n"
    "  <interface name=\"org.alljoyn.Bus.TestInterface\">\n"
    "    <description language=\"de\">German interface description</description>\n"
    "    <property name=\"TestProperty\" type=\"s\" access=\"readwrite\">\n"
    "      <description language=\"de\">German property description</description>\n"
    "    </property>\n"
    "    <property name=\"ExtraProperty\" type=\"s\" access=\"readwrite\">\n"
    "      <description language=\"de\">German extra property description</description>\n"
    "    </property>\n"
    "  </interface>\n"
    "  <interface name=\"org.freedesktop.DBus.Introspectable\">\n"
    "    <method name=\"Introspect\">\n"
    "      <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "    </method>\n"
    "  </interface>\n"
    "  <interface name=\"org.allseen.Introspectable\">\n"
    "    <method name=\"GetDescriptionLanguages\">\n"
    "      <arg name=\"languageTags\" type=\"as\" direction=\"out\"/>\n"
    "    </method>\n"
    "    <method name=\"IntrospectWithDescription\">\n"
    "      <arg name=\"languageTag\" type=\"s\" direction=\"in\"/>\n"
    "      <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "    </method>\n"
    "    <annotation name=\"org.alljoyn.Bus.Secure\" value=\"off\"/>\n"
    "  </interface>\n"
    "</node>\n";


static AJ_PCSTR s_xmlTwoInterfacesNoDescriptions =
    // No DOCTYPE, as in e.g., Legacy TCL
    "<node>\n"
    "  <interface name=\"org.alljoyn.Bus.FirstTestInterface\">\n"
    "    <property name=\"TestProperty\" type=\"s\" access=\"readwrite\"/>\n"
    "    <method name=\"TestMethod\">\n"
    "      <arg name=\"FirstArgument\" type=\"s\" direction=\"in\"/>\n"
    "      <arg name=\"SecondArgument\" type=\"s\" direction=\"out\"/>\n"
    "    </method>\n"
    "  </interface>\n"
    "  <interface name=\"org.freedesktop.DBus.Introspectable\">\n"
    "    <method name=\"Introspect\">\n"
    "      <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "    </method>\n"
    "  </interface>\n"
    "  <interface name=\"org.allseen.Introspectable\">\n"
    "    <method name=\"GetDescriptionLanguages\">\n"
    "      <arg name=\"languageTags\" type=\"as\" direction=\"out\"/>\n"
    "    </method>\n"
    "    <method name=\"IntrospectWithDescription\">\n"
    "      <arg name=\"languageTag\" type=\"s\" direction=\"in\"/>\n"
    "      <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "    </method>\n"
    "    <annotation name=\"org.alljoyn.Bus.Secure\" value=\"off\"/>\n"
    "  </interface>\n"
    "  <interface name=\"org.alljoyn.Bus.SecondTestInterface\">\n"
    "    <signal name=\"TestSignal\">\n"
    "      <arg name=\"FirstSignalArgument\" type=\"s\" direction=\"in\"/>\n"
    "      <arg name=\"SecondSignalArgument\" type=\"s\" direction=\"out\"/>\n"
    "      <arg name=\"ThirdSignalArgument\" type=\"s\" direction=\"out\"/>\n"
    "    </signal>\n"
    "  </interface>\n"
    "</node>\n";

static AJ_PCSTR s_xmlTwoInterfacesIntrospectWithDescriptionEn =
    "<node>\n"
    "  <interface name=\"org.alljoyn.Bus.FirstTestInterface\">\n"
    "    <property name=\"TestProperty\" type=\"s\" access=\"readwrite\">\n"
    "      <description language=\"en\">English Property Description</description>\n"
    "    </property>\n"
    "    <method name=\"TestMethod\">\n"
    "      <arg name=\"FirstArgument\" type=\"s\" direction=\"in\">\n"
    "        <description language=\"en\">English First Method Argument Description</description>\n"
    "      </arg>\n"
    "      <arg name=\"SecondArgument\" type=\"s\" direction=\"out\"/>\n"
    "      <description language=\"en\">English First Method Description</description>\n"
    "    </method>\n"
    "  </interface>\n"
    "  <interface name=\"org.freedesktop.DBus.Introspectable\">\n"
    "    <method name=\"Introspect\">\n"
    "      <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "    </method>\n"
    "  </interface>\n"
    "  <interface name=\"org.allseen.Introspectable\">\n"
    "    <method name=\"GetDescriptionLanguages\">\n"
    "      <arg name=\"languageTags\" type=\"as\" direction=\"out\"/>\n"
    "    </method>\n"
    "    <method name=\"IntrospectWithDescription\">\n"
    "      <arg name=\"languageTag\" type=\"s\" direction=\"in\"/>\n"
    "      <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "    </method>\n"
    "    <annotation name=\"org.alljoyn.Bus.Secure\" value=\"off\"/>\n"
    "  </interface>\n"
    "  <interface name=\"org.alljoyn.Bus.SecondTestInterface\">\n"
    "    <signal name=\"TestSignal\">\n"
    "      <arg name=\"FirstSignalArgument\" type=\"s\" direction=\"in\">\n"
    "        <description language=\"en\">English First Signal Argument Description</description>\n"
    "      </arg>\n"
    "      <arg name=\"SecondSignalArgument\" type=\"s\" direction=\"out\">\n"
    "        <description language=\"en\">English Second Signal Argument Description</description>\n"
    "      </arg>"
    "      <arg name=\"ThirdSignalArgument\" type=\"s\" direction=\"out\"/>\n"
    "      <description language=\"en\">English Signal Description</description>\n"
    "    </signal>\n"
    "    <description language=\"en\">English Second Interface Description</description>\n"
    "  </interface>\n"
    "</node>\n";

static AJ_PCSTR s_xmlTwoInterfacesIntrospectWithDescriptionDe =
    "<node>\n"
    "  <interface name=\"org.alljoyn.Bus.FirstTestInterface\">\n"
    "    <property name=\"TestProperty\" type=\"s\" access=\"readwrite\">\n"
    "      <description language=\"de\">German Property Description</description>\n"
    "    </property>\n"
    "    <method name=\"TestMethod\">\n"
    "      <arg name=\"FirstArgument\" type=\"s\" direction=\"in\">\n"
    "        <description language=\"de\">German First Method Argument Description</description>\n"
    "      </arg>\n"
    "      <arg name=\"SecondArgument\" type=\"s\" direction=\"out\"/>\n"
    "      <description language=\"de\">German First Method Description</description>\n"
    "    </method>\n"
    "  </interface>\n"
    "  <interface name=\"org.freedesktop.DBus.Introspectable\">\n"
    "    <method name=\"Introspect\">\n"
    "      <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "    </method>\n"
    "  </interface>\n"
    "  <interface name=\"org.allseen.Introspectable\">\n"
    "    <method name=\"GetDescriptionLanguages\">\n"
    "      <arg name=\"languageTags\" type=\"as\" direction=\"out\"/>\n"
    "    </method>\n"
    "    <method name=\"IntrospectWithDescription\">\n"
    "      <arg name=\"languageTag\" type=\"s\" direction=\"in\"/>\n"
    "      <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "    </method>\n"
    "    <annotation name=\"org.alljoyn.Bus.Secure\" value=\"off\"/>\n"
    "  </interface>\n"
    "  <interface name=\"org.alljoyn.Bus.SecondTestInterface\">\n"
    "    <signal name=\"TestSignal\">\n"
    "      <arg name=\"FirstSignalArgument\" type=\"s\" direction=\"in\">\n"
    "        <description language=\"de\">German First Signal Argument Description</description>\n"
    "      </arg>\n"
    "      <arg name=\"SecondSignalArgument\" type=\"s\" direction=\"out\">\n"
    "        <description language=\"de\">German Second Signal Argument Description</description>\n"
    "      </arg>"
    "      <arg name=\"ThirdSignalArgument\" type=\"s\" direction=\"out\"/>\n"
    "      <description language=\"de\">German Signal Description</description>\n"
    "    </signal>\n"
    "    <description language=\"de\">German Second Interface Description</description>\n"
    "  </interface>\n"
    "</node>\n";

static AJ_PCSTR s_xmlMalformedWithDescriptionEn =
    "<!DOCTYPE node PUBLIC \"-//allseen//DTD ALLJOYN Object Introspection 1.0//EN\"\n"
    "\"http://www.allseen.org/alljoyn/introspect-1.0.dtd\">\n"
    "<node>\n"
    "  <description language=\"en\">English object description</description>\n"
    "  <interface name=\"org.alljoyn.Bus.FirstTestInterface\">\n"
    "    <description language=\"en\">English interface description</description>\n"
    "    <property name=\"TestProperty\" type=\"s\" access=\"readwrite\">\n"
    "      <description language=\"en\">English property description</description>\n"
    "    </property>\n"
    "  </interface>\n"
    "  <interface name=\"org.freedesktop.DBus.Introspectable\">\n"
    "    <method name=\"Introspect\">\n"
    "      <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    // Missing: "    </method>\n"
    "  </interface>\n"
    "  <interface name=\"org.allseen.Introspectable\">\n"
    "    <method name=\"GetDescriptionLanguages\">\n"
    "      <arg name=\"languageTags\" type=\"as\" direction=\"out\"/>\n"
    "    </method>\n"
    "    <method name=\"IntrospectWithDescription\">\n"
    "      <arg name=\"languageTag\" type=\"s\" direction=\"in\"/>\n"
    "      <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "    </method>\n"
    "    <annotation name=\"org.alljoyn.Bus.Secure\" value=\"off\"/>\n"
    "  </interface>\n"
    "</node>\n";

static AJ_PCSTR s_xmlNonLegacy =
    "<!DOCTYPE node PUBLIC \"-//allseen//DTD ALLJOYN Object Introspection 1.1//EN\"\n"
    "\"http://www.allseen.org/alljoyn/introspect-1.1.dtd\">\n" // 1.1 - Non-legacy
    "<node>\n"
    "  <interface name=\"org.alljoyn.Bus.FirstTestInterface\">\n"
    "    <property name=\"TestProperty\" type=\"s\" access=\"readwrite\">\n"
    "    </property>\n"
    "  </interface>\n"
    "  <interface name=\"org.freedesktop.DBus.Introspectable\">\n"
    "    <method name=\"Introspect\">\n"
    "      <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "    </method>\n"
    "  </interface>\n"
    "  <interface name=\"org.allseen.Introspectable\">\n"
    "    <method name=\"GetDescriptionLanguages\">\n"
    "      <arg name=\"languageTags\" type=\"as\" direction=\"out\"/>\n"
    "    </method>\n"
    "    <method name=\"IntrospectWithDescription\">\n"
    "      <arg name=\"languageTag\" type=\"s\" direction=\"in\"/>\n"
    "      <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "    </method>\n"
    "    <annotation name=\"org.alljoyn.Bus.Secure\" value=\"off\"/>\n"
    "  </interface>\n"
    "</node>\n";

static AJ_PCSTR s_xmlTwoNodesNoDescriptions =
    "<!DOCTYPE node PUBLIC \"-//allseen//DTD ALLJOYN Object Introspection 1.0//EN\"\n"
    "\"http://www.allseen.org/alljoyn/introspect-1.0.dtd\">\n"
    "<node>\n"
    "  <node name=\"org\">\n"
    "  <interface name=\"org.freedesktop.DBus.Introspectable\">\n"
    "    <method name=\"Introspect\">\n"
    "      <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "    </method>\n"
    "  </interface>\n"
    "  <interface name=\"org.allseen.Introspectable\">\n"
    "    <method name=\"GetDescriptionLanguages\">\n"
    "      <arg name=\"languageTags\" type=\"as\" direction=\"out\"/>\n"
    "    </method>\n"
    "    <method name=\"IntrospectWithDescription\">\n"
    "      <arg name=\"languageTag\" type=\"s\" direction=\"in\"/>\n"
    "      <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "    </method>\n"
    "    <annotation name=\"org.alljoyn.Bus.Secure\" value=\"off\"/>\n"
    "  </interface>\n"
    "  </node>"
    "  <node name=\"com\">"
    "  <interface name=\"com.UnitTest.TestInterface\">\n"
    "    <property name=\"TestProperty\" type=\"s\" access=\"readwrite\"/>\n"
    "  </interface>\n"
    "  </node>"
    "  <node name=\"net\">"
    "  <interface name=\"net.UnitTest.TestInterface\">\n"
    "    <property name=\"TestProperty\" type=\"s\" access=\"readwrite\"/>\n"
    "  </interface>\n"
    "  </node>"
    "</node>\n";

static AJ_PCSTR s_xmlTwoNodesWithDescriptionEn =
    "<!DOCTYPE node PUBLIC \"-//allseen//DTD ALLJOYN Object Introspection 1.0//EN\"\n"
    "\"http://www.allseen.org/alljoyn/introspect-1.0.dtd\">\n"
    "<node>\n"
    "  <node name=\"org\">\n"
    "  <interface name=\"org.freedesktop.DBus.Introspectable\">\n"
    "    <method name=\"Introspect\">\n"
    "      <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "    </method>\n"
    "  </interface>\n"
    "  <interface name=\"org.allseen.Introspectable\">\n"
    "    <method name=\"GetDescriptionLanguages\">\n"
    "      <arg name=\"languageTags\" type=\"as\" direction=\"out\"/>\n"
    "    </method>\n"
    "    <method name=\"IntrospectWithDescription\">\n"
    "      <arg name=\"languageTag\" type=\"s\" direction=\"in\"/>\n"
    "      <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "    </method>\n"
    "    <annotation name=\"org.alljoyn.Bus.Secure\" value=\"off\"/>\n"
    "  </interface>\n"
    "  </node>"
    "  <node name=\"com\">"
    "  <interface name=\"com.UnitTest.TestInterface\">\n"
    "    <property name=\"TestProperty\" type=\"s\" access=\"readwrite\">\n"
    "      <description language=\"en\">English com.UnitTest Property description</description>"
    "    </property>"
    "  </interface>\n"
    "  </node>"
    "  <node name=\"net\">"
    "  <interface name=\"net.UnitTest.TestInterface\">\n"
    "    <property name=\"TestProperty\" type=\"s\" access=\"readwrite\">\n"
    "      <description language=\"en\">English net.UnitTest Property description</description>"
    "    </property>"
    "  </interface>\n"
    "  </node>"
    "</node>\n";

static AJ_PCSTR s_xmlTwoNodesWithDescriptionDe =
    "<!DOCTYPE node PUBLIC \"-//allseen//DTD ALLJOYN Object Introspection 1.0//EN\"\n"
    "\"http://www.allseen.org/alljoyn/introspect-1.0.dtd\">\n"
    "<node>\n"
    "  <node name=\"org\">\n"
    "  <interface name=\"org.freedesktop.DBus.Introspectable\">\n"
    "    <method name=\"Introspect\">\n"
    "      <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "    </method>\n"
    "  </interface>\n"
    "  <interface name=\"org.allseen.Introspectable\">\n"
    "    <method name=\"GetDescriptionLanguages\">\n"
    "      <arg name=\"languageTags\" type=\"as\" direction=\"out\"/>\n"
    "    </method>\n"
    "    <method name=\"IntrospectWithDescription\">\n"
    "      <arg name=\"languageTag\" type=\"s\" direction=\"in\"/>\n"
    "      <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "    </method>\n"
    "    <annotation name=\"org.alljoyn.Bus.Secure\" value=\"off\"/>\n"
    "  </interface>\n"
    "  </node>"
    "  <node name=\"com\">"
    "  <interface name=\"com.UnitTest.TestInterface\">\n"
    "    <property name=\"TestProperty\" type=\"s\" access=\"readwrite\">\n"
    "      <description language=\"de\">German com.UnitTest Property description</description>"
    "    </property>"
    "  </interface>\n"
    "  </node>"
    "  <node name=\"net\">"
    "  <interface name=\"net.UnitTest.TestInterface\">\n"
    "    <property name=\"TestProperty\" type=\"s\" access=\"readwrite\">\n"
    "      <description language=\"de\">German net.UnitTest Property description</description>"
    "    </property>"
    "  </interface>\n"
    "  </node>"
    "</node>\n";

static AJ_PCSTR s_xmlNestedNodesNoDescriptions =
    "<!DOCTYPE node PUBLIC \"-//allseen//DTD ALLJOYN Object Introspection 1.0//EN\"\n"
    "\"http://www.allseen.org/alljoyn/introspect-1.0.dtd\">\n"
    "<node>\n"
    "  <node name=\"org\">\n"
    "    <interface name=\"org.freedesktop.DBus.Introspectable\">\n"
    "      <method name=\"Introspect\">\n"
    "        <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "      </method>\n"
    "    </interface>\n"
    "    <interface name=\"org.allseen.Introspectable\">\n"
    "      <method name=\"GetDescriptionLanguages\">\n"
    "        <arg name=\"languageTags\" type=\"as\" direction=\"out\"/>\n"
    "      </method>\n"
    "      <method name=\"IntrospectWithDescription\">\n"
    "        <arg name=\"languageTag\" type=\"s\" direction=\"in\"/>\n"
    "        <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "      </method>\n"
    "      <annotation name=\"org.alljoyn.Bus.Secure\" value=\"off\"/>\n"
    "    </interface>\n"
    "  </node>"
    "  <node name=\"com/UnitTest\">"
    "    <interface name=\"com.UnitTest.TestInterface\">\n"
    "      <method name=\"TestMethod\"/>\n"
    "    </interface>\n"
    "    <node name=\"Nested\">"
    "      <interface name=\"com.UnitTest.Nested.TestInterface\">\n"
    "        <method name=\"TestMethod\"/>\n"
    "      </interface>"
    "    </node>"
    "  </node>"
    "</node>\n";

static AJ_PCSTR s_xmlNestedNodesWithDescriptionEn =
    "<!DOCTYPE node PUBLIC \"-//allseen//DTD ALLJOYN Object Introspection 1.0//EN\"\n"
    "\"http://www.allseen.org/alljoyn/introspect-1.0.dtd\">\n"
    "<node>\n"
    "  <node name=\"org\">\n"
    "    <interface name=\"org.freedesktop.DBus.Introspectable\">\n"
    "      <method name=\"Introspect\">\n"
    "        <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "      </method>\n"
    "    </interface>\n"
    "    <interface name=\"org.allseen.Introspectable\">\n"
    "      <method name=\"GetDescriptionLanguages\">\n"
    "        <arg name=\"languageTags\" type=\"as\" direction=\"out\"/>\n"
    "      </method>\n"
    "      <method name=\"IntrospectWithDescription\">\n"
    "        <arg name=\"languageTag\" type=\"s\" direction=\"in\"/>\n"
    "        <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "      </method>\n"
    "      <annotation name=\"org.alljoyn.Bus.Secure\" value=\"off\"/>\n"
    "    </interface>\n"
    "  </node>"
    "  <node name=\"com/UnitTest\">"
    "    <interface name=\"com.UnitTest.TestInterface\">\n"
    "      <method name=\"TestMethod\">\n"
    "        <description language=\"en\">English Method Description</description>"
    "      </method>"
    "    </interface>\n"
    "    <node name=\"Nested\">"
    "      <interface name=\"com.UnitTest.Nested.TestInterface\">\n"
    "        <method name=\"TestMethod\">\n"
    "          <description language=\"en\">English Nested Method Description</description>"
    "        </method>"
    "      </interface>"
    "    </node>"
    "  </node>"
    "</node>\n";

static AJ_PCSTR s_xmlNestedNodesWithDescriptionDe =
    "<!DOCTYPE node PUBLIC \"-//allseen//DTD ALLJOYN Object Introspection 1.0//EN\"\n"
    "\"http://www.allseen.org/alljoyn/introspect-1.0.dtd\">\n"
    "<node>\n"
    "  <node name=\"org\">\n"
    "    <interface name=\"org.freedesktop.DBus.Introspectable\">\n"
    "      <method name=\"Introspect\">\n"
    "        <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "      </method>\n"
    "    </interface>\n"
    "    <interface name=\"org.allseen.Introspectable\">\n"
    "      <method name=\"GetDescriptionLanguages\">\n"
    "        <arg name=\"languageTags\" type=\"as\" direction=\"out\"/>\n"
    "      </method>\n"
    "      <method name=\"IntrospectWithDescription\">\n"
    "        <arg name=\"languageTag\" type=\"s\" direction=\"in\"/>\n"
    "        <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "      </method>\n"
    "      <annotation name=\"org.alljoyn.Bus.Secure\" value=\"off\"/>\n"
    "    </interface>\n"
    "  </node>"
    "  <node name=\"com/UnitTest\">"
    "    <interface name=\"com.UnitTest.TestInterface\">\n"
    "      <method name=\"TestMethod\">\n"
    "        <description language=\"de\">German Method Description</description>"
    "      </method>"
    "    </interface>\n"
    "    <node name=\"Nested\">"
    "      <interface name=\"com.UnitTest.Nested.TestInterface\">\n"
    "        <method name=\"TestMethod\">\n"
    "          <description language=\"de\">German Nested Method Description</description>"
    "        </method>"
    "      </interface>"
    "    </node>"
    "  </node>"
    "</node>\n";

static AJ_PCSTR s_xmlSingleInterfaceNoAllSeenIntrospection =
    "<!DOCTYPE node PUBLIC \"-//allseen//DTD ALLJOYN Object Introspection 1.0//EN\"\n"
    "\"http://www.allseen.org/alljoyn/introspect-1.0.dtd\">\n"
    "<node>\n"
    "  <interface name=\"org.alljoyn.Bus.TestInterface\">\n"
    "    <property name=\"TestProperty\" type=\"s\" access=\"readwrite\">\n"
    "    </property>\n"
    "  </interface>\n"
    // Only org.freedesktop.DBus.Introspectable below, no support for org.allseen.Introspectable.
    "  <interface name=\"org.freedesktop.DBus.Introspectable\">\n"
    "    <method name=\"Introspect\">\n"
    "      <arg name=\"data\" type=\"s\" direction=\"out\"/>\n"
    "    </method>\n"
    "  </interface>\n"
    "</node>\n";

static AJ_PCSTR s_xmlLifx =
    "<node name=\"/org/allseen/LSF/Lamp\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" "
    "xsi:noNamespaceSchemaLocation=\"https://allseenalliance.org/schemas/introspect.xsd\">"
    "    <interface name=\"org.freedesktop.DBus.Properties\">" // Standard DBus interface. Should be ignored.
    "        <method name=\"Get\">"
    "            <arg type=\"s\" direction=\"in\"/>"
    "            <arg type=\"s\" direction=\"in\"/>"
    "            <arg type=\"v\" direction=\"out\"/>"
    "        </method>"
    "        <method name=\"Set\">"
    "            <arg type=\"s\" direction=\"in\"/>"
    "            <arg type=\"s\" direction=\"in\"/>"
    "            <arg type=\"v\" direction=\"in\"/>"
    "        </method>"
    "        <method name=\"GetAll\">"
    "            <arg type=\"s\" direction=\"in\"/>"
    "            <arg type=\"a{sv}\" direction=\"out\"/>"
    "        </method>"
    "    </interface>"
    "    <interface name=\"org.allseen.LSF.LampService\">"
    "        <property name=\"Version\" type=\"u\" access=\"read\"/>"
    "        <property name=\"LampServiceVersion\" type=\"u\" access=\"read\"/>"
    "        <method name=\"ClearLampFault\">"
    "            <arg name=\"LampFaultCode\" type=\"u\" direction=\"in\"/>"
    "            <arg name=\"LampResponseCode\" type=\"u\" direction=\"out\"/>"
    "            <arg name=\"LampFaultCode\" type=\"u\" direction=\"out\"/>"
    "        </method>"
    "        <property name=\"LampFaults\" type=\"au\" access=\"read\"/>"
    "    </interface>"
    "    <interface name=\"org.allseen.LSF.LampParameters\">"
    "        <property name=\"Version\" type=\"u\" access=\"read\"/>"
    "        <property name=\"Energy_Usage_Milliwatts\" type=\"u\" access=\"read\"/>"
    "        <property name=\"Brightness_Lumens\" type=\"u\" access=\"read\"/>"
    "    </interface>"
    "    <interface name=\"org.allseen.LSF.LampDetails\">"
    "        <property name=\"Version\" type=\"u\" access=\"read\"/>"
    "        <property name=\"Make\" type=\"u\" access=\"read\"/>"
    "        <property name=\"Model\" type=\"u\" access=\"read\"/>"
    "        <property name=\"Type\" type=\"u\" access=\"read\"/>"
    "        <property name=\"LampType\" type=\"u\" access=\"read\"/>"
    "        <property name=\"LampBaseType\" type=\"u\" access=\"read\"/>"
    "        <property name=\"LampBeamAngle\" type=\"u\" access=\"read\"/>"
    "        <property name=\"Dimmable\" type=\"b\" access=\"read\"/>"
    "        <property name=\"Color\" type=\"b\" access=\"read\"/>"
    "        <property name=\"VariableColorTemp\" type=\"b\" access=\"read\"/>"
    "        <property name=\"HasEffects\" type=\"b\" access=\"read\"/>"
    "        <property name=\"MinVoltage\" type=\"u\" access=\"read\"/>"
    "        <property name=\"MaxVoltage\" type=\"u\" access=\"read\"/>"
    "        <property name=\"Wattage\" type=\"u\" access=\"read\"/>"
    "        <property name=\"IncandescentEquivalent\" type=\"u\" access=\"read\"/>"
    "        <property name=\"MaxLumens\" type=\"u\" access=\"read\"/>"
    "        <property name=\"MinTemperature\" type=\"u\" access=\"read\"/>"
    "        <property name=\"MaxTemperature\" type=\"u\" access=\"read\"/>"
    "        <property name=\"ColorRenderingIndex\" type=\"u\" access=\"read\"/>"
    "        <property name=\"LampID\" type=\"s\" access=\"read\"/>"
    "    </interface>"
    "    <interface name=\"org.allseen.LSF.LampState\">"
    "        <property name=\"Version\" type=\"u\" access=\"read\"/>"
    "        <method name=\"TransitionLampState\">"
    "            <arg name=\"Timestamp\" type=\"t\" direction=\"in\"/>"
    "            <arg name=\"NewState\" type=\"a{sv}\" direction=\"in\"/>"
    "            <arg name=\"TransitionPeriod\" type=\"u\" direction=\"in\"/>"
    "            <arg name=\"LampResponseCode\" type=\"u\" direction=\"out\"/>"
    "        </method>"
    "        <method name=\"ApplyPulseEffect\">"
    "            <arg name=\"FromState\" type=\"a{sv}\" direction=\"in\"/>"
    "            <arg name=\"ToState\" type=\"a{sv}\" direction=\"in\"/>"
    "            <arg name=\"period\" type=\"u\" direction=\"in\"/>"
    "            <arg name=\"duration\" type=\"u\" direction=\"in\"/>"
    "            <arg name=\"numPulses\" type=\"u\" direction=\"in\"/>"
    "            <arg name=\"timestamp\" type=\"t\" direction=\"in\"/>"
    "            <arg name=\"LampResponseCode\" type=\"u\" direction=\"out\"/>"
    "        </method>"
    "        <signal name=\"LampStateChanged\">"
    "            <arg name=\"LampID\" type=\"s\"/>"
    "        </signal>"
    "        <property name=\"OnOff\" type=\"b\" access=\"readwrite\"/>"
    "        <property name=\"Hue\" type=\"u\" access=\"readwrite\"/>"
    "        <property name=\"Saturation\" type=\"u\" access=\"readwrite\"/>"
    "        <property name=\"ColorTemp\" type=\"u\" access=\"readwrite\"/>"
    "        <property name=\"Brightness\" type=\"u\" access=\"readwrite\"/>"
    "    </interface>"
    "</node>";

typedef struct XmlSet {
    AJ_PCSTR introspectWithoutDescription;   // Introspect() output - no description.
    AJ_PCSTR introspectWithDescriptionEn;    // IntrospectWithDescription("en") output.
    AJ_PCSTR introspectWithDescriptionDe;    // IntrospectWithDescription("de") output.
} XmlSet;

/*
 * Base class for fake BusObjects used to emulate pre-16.04 nodes.
 * Overridden Introspect() and IntrospectWithDescription() methods return hardcoded
 * legacy XMLs from a given XmlSet.
 */
class FakeObject : public BusObject {
  public:
    FakeObject(AJ_PCSTR path, const XmlSet& xmlSet) :
        BusObject(path),
        xmls(xmlSet)
    {
    }
  protected:
    XmlSet xmls;
};

class FakeLegacyObjectWithDescriptions : public FakeObject {
  public:
    FakeLegacyObjectWithDescriptions(AJ_PCSTR path, const XmlSet& xmlSet) :
        FakeObject(path, xmlSet)
    {
    }

    virtual void Introspect(const InterfaceDescription::Member* member, Message& msg)
    {
        QCC_UNUSED(member);

        AJ_PCSTR xml = xmls.introspectWithoutDescription;
        MsgArg arg("s", xml);
        QStatus status = MethodReply(msg, &arg, 1);
        EXPECT_EQ(ER_OK, status);
    }

    virtual void IntrospectWithDescription(const InterfaceDescription::Member* member, Message& msg)
    {
        QCC_UNUSED(member);
        AJ_PCSTR langTag;
        msg->GetArgs("s", &langTag);

        AJ_PCSTR xml = nullptr;
        if (strcmp(langTag, "en") == 0) {
            xml = xmls.introspectWithDescriptionEn;
        } else if (strcmp(langTag, "de") == 0) {
            xml = xmls.introspectWithDescriptionDe;
        } else {
            FAIL() << "IntrospectWithDescription called with wrong language tag";
        }
        MsgArg arg("s", xml);
        QStatus status = MethodReply(msg, &arg, 1);
        EXPECT_EQ(ER_OK, status);
    }

    virtual void GetDescriptionLanguages(const InterfaceDescription::Member* member, Message& msg)
    {
        QCC_UNUSED(member);

        std::vector<AJ_PCSTR> tags;
        AJ_PSTR tag = new char[3];
        strncpy(tag, "de", 3);
        tags.push_back(tag);
        tag = new char[3];
        strncpy(tag, "en", 3);
        tags.push_back(tag);

        MsgArg replyArg[1];
        replyArg[0].Set("as", tags.size(), &tags[0]);
        replyArg[0].SetOwnershipFlags(MsgArg::OwnsData | MsgArg::OwnsArgs, true);
        EXPECT_EQ(ER_OK, MethodReply(msg, replyArg, 1));
    }
};

class FakeLegacyObjectWithoutDescription : public FakeObject {
  public:
    FakeLegacyObjectWithoutDescription(AJ_PCSTR path, const XmlSet& xmlSet) :
        FakeObject(path, xmlSet)
    {
    }

    virtual void Introspect(const InterfaceDescription::Member* member, Message& msg)
    {
        QCC_UNUSED(member);

        AJ_PCSTR xml = xmls.introspectWithoutDescription;
        MsgArg arg("s", xml);
        QStatus status = MethodReply(msg, &arg, 1);
        EXPECT_EQ(ER_OK, status);
    }

    virtual void IntrospectWithDescription(const InterfaceDescription::Member* member, Message& msg)
    {
        QCC_UNUSED(member);
        QCC_UNUSED(msg);

        FAIL() << "IntrospectWithDescription called for object without description";
    }

    virtual void GetDescriptionLanguages(const InterfaceDescription::Member* member, Message& msg)
    {
        QCC_UNUSED(member);

        // No descriptions - send empty language list in reply.
        MsgArg replyArg[1];
        replyArg[0].Set("as", 0, nullptr);
        replyArg[0].SetOwnershipFlags(MsgArg::OwnsData | MsgArg::OwnsArgs, true);
        EXPECT_EQ(ER_OK, MethodReply(msg, replyArg, 1));
    }
};

class FakeNonLegacyObject : public FakeObject {
  public:
    FakeNonLegacyObject(AJ_PCSTR path, const XmlSet& xmlSet) :
        FakeObject(path, xmlSet)
    {
    }

    virtual void Introspect(const InterfaceDescription::Member* member, Message& msg)
    {
        QCC_UNUSED(member);

        AJ_PCSTR xml = xmls.introspectWithoutDescription;
        MsgArg arg("s", xml);
        QStatus status = MethodReply(msg, &arg, 1);
        EXPECT_EQ(ER_OK, status);
    }

    virtual void IntrospectWithDescription(const InterfaceDescription::Member* member, Message& msg)
    {
        QCC_UNUSED(member);
        QCC_UNUSED(msg);

        FAIL() << "IntrospectWithDescription called for non-legacy object";
    }

    virtual void GetDescriptionLanguages(const InterfaceDescription::Member* member, Message& msg)
    {
        QCC_UNUSED(member);
        QCC_UNUSED(msg);

        FAIL() << "GetDescriptionLanguages called for non-legacy object";
    }
};

class FakeLegacyObjectWithoutAllSeenIntrospection : public FakeObject {
  public:
    FakeLegacyObjectWithoutAllSeenIntrospection(AJ_PCSTR path, const XmlSet& xmlSet) :
        FakeObject(path, xmlSet)
    {
    }

    virtual void Introspect(const InterfaceDescription::Member* member, Message& msg)
    {
        QCC_UNUSED(member);

        AJ_PCSTR xml = xmls.introspectWithoutDescription;
        MsgArg arg("s", xml);
        QStatus status = MethodReply(msg, &arg, 1);
        EXPECT_EQ(ER_OK, status);
    }

    virtual void IntrospectWithDescription(const InterfaceDescription::Member* member, Message& msg)
    {
        QCC_UNUSED(member);
        QCC_UNUSED(msg);

        FAIL() << "IntrospectWithDescription called for object without AllSeen introspection";
    }

    virtual void GetDescriptionLanguages(const InterfaceDescription::Member* member, Message& msg)
    {
        QCC_UNUSED(member);
        QCC_UNUSED(msg);

        FAIL() << "GetDescriptionLanguages called for object without AllSeen introspection";
    }
};

class IntrospectionCompatibilityTest : public::testing::Test {
  protected:

    virtual void SetUp() {
        serverAttachment.reset(new BusAttachment("serverApp", true));
        ASSERT_NE(nullptr, serverAttachment);
        ASSERT_EQ(ER_OK, serverAttachment->Start());

        clientAttachment.reset(new BusAttachment("clientApp", true));
        ASSERT_NE(nullptr, clientAttachment);
        ASSERT_EQ(ER_OK, clientAttachment->Start());
        ASSERT_EQ(ER_OK, clientAttachment->Connect());
    }

    std::shared_ptr<BusAttachment> serverAttachment;
    std::shared_ptr<BusAttachment> clientAttachment;
    std::shared_ptr<BusObject> fakeObject;
    std::shared_ptr<ProxyBusObject> proxyObject;
};

TEST_F(IntrospectionCompatibilityTest, IntrospectRemoteObject_FakeLegacyObjectWithDescriptionsSingleInterface_RemoteInterfaceHasDescriptions) {
    AJ_PCSTR interfaceName = "org.alljoyn.Bus.TestInterface";

    InterfaceDescription* intf = nullptr;
    ASSERT_EQ(ER_OK, serverAttachment->CreateInterface(interfaceName, intf));
    ASSERT_NE(nullptr, intf);

    const XmlSet singleInterfaceXmls =
    { s_xmlSingleInterfaceNoDescriptions, s_xmlSingleInterfaceIntrospectWithDescriptionEn, s_xmlSingleInterfaceIntrospectWithDescriptionDe };
    fakeObject.reset(new FakeLegacyObjectWithDescriptions(s_mainPath, singleInterfaceXmls));
    ASSERT_NE(nullptr, fakeObject);
    ASSERT_EQ(ER_OK, serverAttachment->RegisterBusObject(*fakeObject));
    ASSERT_EQ(ER_OK, serverAttachment->Connect());

    proxyObject.reset(new ProxyBusObject(*clientAttachment, serverAttachment->GetUniqueName().c_str(), s_mainPath, 0));
    ASSERT_NE(nullptr, proxyObject);
    EXPECT_EQ(ER_OK, proxyObject->IntrospectRemoteObject());

    const InterfaceDescription* remoteIntf = proxyObject->GetInterface(interfaceName);
    ASSERT_NE(nullptr, remoteIntf);

    qcc::String description;
    ASSERT_TRUE(remoteIntf->GetDescriptionForLanguage(description, "en"));
    EXPECT_STREQ("English interface description", description.c_str());
    ASSERT_TRUE(remoteIntf->GetDescriptionForLanguage(description, "de"));
    EXPECT_STREQ("German interface description", description.c_str());
    ASSERT_TRUE(remoteIntf->GetPropertyDescriptionForLanguage("TestProperty", description, "en"));
    EXPECT_STREQ("English property description", description.c_str());
    ASSERT_TRUE(remoteIntf->GetPropertyDescriptionForLanguage("TestProperty", description, "de"));
    EXPECT_STREQ("German property description", description.c_str());
}

TEST_F(IntrospectionCompatibilityTest, IntrospectRemoteObject_FakeLegacyObjectWithDescriptionsTwoInterfaces_RemoteInterfaceHasDescriptions) {
    AJ_PCSTR firstInterfaceName = "org.alljoyn.Bus.FirstTestInterface";
    AJ_PCSTR secondInterfaceName = "org.alljoyn.Bus.SecondTestInterface";

    InterfaceDescription* intf = nullptr;
    ASSERT_EQ(ER_OK, serverAttachment->CreateInterface(firstInterfaceName, intf));
    ASSERT_NE(nullptr, intf);
    ASSERT_EQ(ER_OK, serverAttachment->CreateInterface(secondInterfaceName, intf));
    ASSERT_NE(nullptr, intf);

    const XmlSet twoInterfacesXmls =
    { s_xmlTwoInterfacesNoDescriptions, s_xmlTwoInterfacesIntrospectWithDescriptionEn, s_xmlTwoInterfacesIntrospectWithDescriptionDe };
    fakeObject.reset(new FakeLegacyObjectWithDescriptions(s_mainPath, twoInterfacesXmls));
    ASSERT_NE(nullptr, fakeObject);
    ASSERT_EQ(ER_OK, serverAttachment->RegisterBusObject(*fakeObject));
    ASSERT_EQ(ER_OK, serverAttachment->Connect());

    proxyObject.reset(new ProxyBusObject(*clientAttachment, serverAttachment->GetUniqueName().c_str(), s_mainPath, 0));
    ASSERT_NE(nullptr, proxyObject);
    EXPECT_EQ(ER_OK, proxyObject->IntrospectRemoteObject());

    const InterfaceDescription* firstRemoteIntf = proxyObject->GetInterface(firstInterfaceName);
    ASSERT_NE(nullptr, firstRemoteIntf);

    qcc::String description;
    ASSERT_TRUE(firstRemoteIntf->GetPropertyDescriptionForLanguage("TestProperty", description, "en"));
    EXPECT_STREQ("English Property Description", description.c_str());
    ASSERT_TRUE(firstRemoteIntf->GetPropertyDescriptionForLanguage("TestProperty", description, "de"));
    EXPECT_STREQ("German Property Description", description.c_str());
    ASSERT_TRUE(firstRemoteIntf->GetArgDescriptionForLanguage("TestMethod", "FirstArgument", description, "en"));
    EXPECT_STREQ("English First Method Argument Description", description.c_str());
    ASSERT_TRUE(firstRemoteIntf->GetArgDescriptionForLanguage("TestMethod", "FirstArgument", description, "de"));
    EXPECT_STREQ("German First Method Argument Description", description.c_str());
    EXPECT_FALSE(firstRemoteIntf->GetArgDescriptionForLanguage("TestMethod", "SecondArgument", description, "en"));
    EXPECT_FALSE(firstRemoteIntf->GetArgDescriptionForLanguage("TestMethod", "SecondArgument", description, "de"));
    ASSERT_TRUE(firstRemoteIntf->GetMemberDescriptionForLanguage("TestMethod", description, "en"));
    EXPECT_STREQ("English First Method Description", description.c_str());
    ASSERT_TRUE(firstRemoteIntf->GetMemberDescriptionForLanguage("TestMethod", description, "de"));
    EXPECT_STREQ("German First Method Description", description.c_str());

    const InterfaceDescription* secondRemoteIntf = proxyObject->GetInterface(secondInterfaceName);
    ASSERT_NE(nullptr, secondRemoteIntf);

    ASSERT_TRUE(secondRemoteIntf->GetMemberDescriptionForLanguage("TestSignal", description, "en"));
    EXPECT_STREQ("English Signal Description", description.c_str());
    ASSERT_TRUE(secondRemoteIntf->GetMemberDescriptionForLanguage("TestSignal", description, "de"));
    EXPECT_STREQ("German Signal Description", description.c_str());

    ASSERT_TRUE(secondRemoteIntf->GetArgDescriptionForLanguage("TestSignal", "FirstSignalArgument", description, "en"));
    EXPECT_STREQ("English First Signal Argument Description", description.c_str());
    ASSERT_TRUE(secondRemoteIntf->GetArgDescriptionForLanguage("TestSignal", "FirstSignalArgument", description, "de"));
    EXPECT_STREQ("German First Signal Argument Description", description.c_str());
    ASSERT_TRUE(secondRemoteIntf->GetArgDescriptionForLanguage("TestSignal", "SecondSignalArgument", description, "en"));
    EXPECT_STREQ("English Second Signal Argument Description", description.c_str());
    ASSERT_TRUE(secondRemoteIntf->GetArgDescriptionForLanguage("TestSignal", "SecondSignalArgument", description, "de"));
    EXPECT_STREQ("German Second Signal Argument Description", description.c_str());
    EXPECT_FALSE(secondRemoteIntf->GetArgDescriptionForLanguage("TestSignal", "ThirdSignalArgument", description, "en"));
    EXPECT_FALSE(secondRemoteIntf->GetArgDescriptionForLanguage("TestSignal", "ThirdSignalArgument", description, "de"));
    ASSERT_TRUE(secondRemoteIntf->GetDescriptionForLanguage(description, "en"));
    EXPECT_STREQ("English Second Interface Description", description.c_str());
    ASSERT_TRUE(secondRemoteIntf->GetDescriptionForLanguage(description, "de"));
    EXPECT_STREQ("German Second Interface Description", description.c_str());
}

TEST_F(IntrospectionCompatibilityTest, IntrospectRemoteObject_FakeLegacyObjectWithoutDescription_CreatesInterfaceDoesNotCallIntrospectWithDescription) {
    AJ_PCSTR interfaceName = "org.alljoyn.Bus.TestInterface";

    InterfaceDescription* intf = nullptr;
    ASSERT_EQ(ER_OK, serverAttachment->CreateInterface(interfaceName, intf));
    ASSERT_NE(nullptr, intf);
    intf->AddProperty("name", "s", PROP_ACCESS_RW);

    const XmlSet noDescriptionXmls = { s_xmlSingleInterfaceNoDescriptions, nullptr, nullptr };
    fakeObject.reset(new FakeLegacyObjectWithoutDescription(s_mainPath, noDescriptionXmls));
    ASSERT_NE(nullptr, fakeObject);
    ASSERT_EQ(ER_OK, serverAttachment->RegisterBusObject(*fakeObject));
    ASSERT_EQ(ER_OK, serverAttachment->Connect());

    proxyObject.reset(new ProxyBusObject(*clientAttachment, serverAttachment->GetUniqueName().c_str(), s_mainPath, 0));
    ASSERT_NE(nullptr, proxyObject);
    EXPECT_EQ(ER_OK, proxyObject->IntrospectRemoteObject());

    const InterfaceDescription* remoteIntf = proxyObject->GetInterface(interfaceName);
    EXPECT_NE(nullptr, remoteIntf);
}

TEST_F(IntrospectionCompatibilityTest, IntrospectRemoteObject_FakeLegacyObjectWithDescriptionsMalformedInterface_ReturnsBadXml) {
    AJ_PCSTR interfaceName = "org.alljoyn.Bus.TestInterface";

    InterfaceDescription* intf = nullptr;
    ASSERT_EQ(ER_OK, serverAttachment->CreateInterface(interfaceName, intf));
    ASSERT_NE(nullptr, intf);

    const XmlSet malformedXmls =
    { s_xmlSingleInterfaceNoDescriptions, s_xmlMalformedWithDescriptionEn, s_xmlSingleInterfaceIntrospectWithDescriptionDe };
    fakeObject.reset(new FakeLegacyObjectWithDescriptions(s_mainPath, malformedXmls));
    ASSERT_NE(nullptr, fakeObject);
    ASSERT_EQ(ER_OK, serverAttachment->RegisterBusObject(*fakeObject));
    ASSERT_EQ(ER_OK, serverAttachment->Connect());

    proxyObject.reset(new ProxyBusObject(*clientAttachment, serverAttachment->GetUniqueName().c_str(), s_mainPath, 0));
    ASSERT_NE(nullptr, proxyObject);
    EXPECT_EQ(ER_BUS_BAD_XML, proxyObject->IntrospectRemoteObject());
}

TEST_F(IntrospectionCompatibilityTest, IntrospectRemoteObject_FakeLegacyObjectWithInconsistentDescriptionXml_ReturnsBadXml) {
    AJ_PCSTR interfaceName = "org.alljoyn.Bus.TestInterface";

    InterfaceDescription* intf = nullptr;
    ASSERT_EQ(ER_OK, serverAttachment->CreateInterface(interfaceName, intf));
    ASSERT_NE(nullptr, intf);

    const XmlSet inconsistentXmls =
    { s_xmlSingleInterfaceNoDescriptions, s_xmlSingleInterfaceIntrospectWithDescriptionEn, s_xmlWithDescriptionInconsistentDe };
    /* s_xmlWithDescriptionInconsistentDe contains "ExtraProperty" property which is not present
     * in the Introspect XML (s_xmlSingleInterfaceNoDescriptions). Inconsistent - should not parse.
     */
    fakeObject.reset(new FakeLegacyObjectWithDescriptions(s_mainPath, inconsistentXmls));
    ASSERT_NE(nullptr, fakeObject);
    ASSERT_EQ(ER_OK, serverAttachment->RegisterBusObject(*fakeObject));
    ASSERT_EQ(ER_OK, serverAttachment->Connect());

    proxyObject.reset(new ProxyBusObject(*clientAttachment, serverAttachment->GetUniqueName().c_str(), s_mainPath, 0));
    ASSERT_NE(nullptr, proxyObject);
    EXPECT_EQ(ER_BUS_BAD_XML, proxyObject->IntrospectRemoteObject());
}

TEST_F(IntrospectionCompatibilityTest, IntrospectRemoteObject_NonLegacyObject_ReturnsOkDoesNotCallIntrospectWithDescription) {
    AJ_PCSTR interfaceName = "org.alljoyn.Bus.TestInterface";

    InterfaceDescription* intf = nullptr;
    ASSERT_EQ(ER_OK, serverAttachment->CreateInterface(interfaceName, intf));
    ASSERT_NE(nullptr, intf);

    const XmlSet nonLegacyXmls = { s_xmlNonLegacy, nullptr, nullptr };
    fakeObject.reset(new FakeNonLegacyObject(s_mainPath, nonLegacyXmls));
    ASSERT_NE(nullptr, fakeObject);
    ASSERT_EQ(ER_OK, serverAttachment->RegisterBusObject(*fakeObject));
    ASSERT_EQ(ER_OK, serverAttachment->Connect());

    proxyObject.reset(new ProxyBusObject(*clientAttachment, serverAttachment->GetUniqueName().c_str(), s_mainPath, 0));
    ASSERT_NE(nullptr, proxyObject);
    EXPECT_EQ(ER_OK, proxyObject->IntrospectRemoteObject());
}

TEST_F(IntrospectionCompatibilityTest, IntrospectRemoteObject_FakeLegacyObjectWithDescriptionsTwoNodes_RemoteInterfacesInNodesHaveDescriptions)
{
    AJ_PCSTR comUnittestInterfaceName = "com.UnitTest.TestInterface";
    AJ_PCSTR netUnittestInterfaceName = "net.UnitTest.TestInterface";
    InterfaceDescription* intf = nullptr;
    ASSERT_EQ(ER_OK, serverAttachment->CreateInterface(comUnittestInterfaceName, intf));
    ASSERT_NE(nullptr, intf);
    ASSERT_EQ(ER_OK, serverAttachment->CreateInterface(netUnittestInterfaceName, intf));
    ASSERT_NE(nullptr, intf);

    const XmlSet twoNodesXmls =
    { s_xmlTwoNodesNoDescriptions, s_xmlTwoNodesWithDescriptionEn, s_xmlTwoNodesWithDescriptionDe };
    fakeObject.reset(new FakeLegacyObjectWithDescriptions(s_mainPath, twoNodesXmls));
    ASSERT_NE(nullptr, fakeObject);
    ASSERT_EQ(ER_OK, serverAttachment->RegisterBusObject(*fakeObject));
    ASSERT_EQ(ER_OK, serverAttachment->Connect());

    proxyObject.reset(new ProxyBusObject(*clientAttachment, serverAttachment->GetUniqueName().c_str(), s_mainPath, 0));
    ASSERT_NE(nullptr, proxyObject);
    EXPECT_EQ(ER_OK, proxyObject->IntrospectRemoteObject());

    ProxyBusObject* comProxy = proxyObject->GetChild("com");
    ASSERT_NE(nullptr, comProxy);
    const InterfaceDescription* comIntf = comProxy->GetInterface(comUnittestInterfaceName);
    ASSERT_NE(nullptr, comIntf);

    qcc::String description;
    ASSERT_TRUE(comIntf->GetPropertyDescriptionForLanguage("TestProperty", description, "en"));
    EXPECT_STREQ("English com.UnitTest Property description", description.c_str());
    ASSERT_TRUE(comIntf->GetPropertyDescriptionForLanguage("TestProperty", description, "de"));
    EXPECT_STREQ("German com.UnitTest Property description", description.c_str());

    ProxyBusObject* netProxy = proxyObject->GetChild("net");
    ASSERT_NE(nullptr, netProxy);
    const InterfaceDescription* netIntf = netProxy->GetInterface(netUnittestInterfaceName);
    ASSERT_NE(nullptr, netIntf);

    ASSERT_TRUE(netIntf->GetPropertyDescriptionForLanguage("TestProperty", description, "en"));
    EXPECT_STREQ("English net.UnitTest Property description", description.c_str());
    ASSERT_TRUE(netIntf->GetPropertyDescriptionForLanguage("TestProperty", description, "de"));
    EXPECT_STREQ("German net.UnitTest Property description", description.c_str());
}

TEST_F(IntrospectionCompatibilityTest, IntrospectRemoteObject_FakeLegacyObjectWithDescriptionsNestedNodes_RemoteInterfacesInNodesHaveDescriptions)
{
    AJ_PCSTR comUnittestInterfaceName = "com.UnitTest.TestInterface";
    AJ_PCSTR comUnittestNestedInterfaceName = "com.UnitTest.Nested.TestInterface";
    InterfaceDescription* intf = nullptr;
    ASSERT_EQ(ER_OK, serverAttachment->CreateInterface(comUnittestInterfaceName, intf));
    ASSERT_NE(nullptr, intf);
    ASSERT_EQ(ER_OK, serverAttachment->CreateInterface(comUnittestNestedInterfaceName, intf));
    ASSERT_NE(nullptr, intf);

    const XmlSet nestedNodesXmls =
    { s_xmlNestedNodesNoDescriptions, s_xmlNestedNodesWithDescriptionEn, s_xmlNestedNodesWithDescriptionDe };
    fakeObject.reset(new FakeLegacyObjectWithDescriptions(s_mainPath, nestedNodesXmls));
    ASSERT_NE(nullptr, fakeObject);
    ASSERT_EQ(ER_OK, serverAttachment->RegisterBusObject(*fakeObject));
    ASSERT_EQ(ER_OK, serverAttachment->Connect());

    proxyObject.reset(new ProxyBusObject(*clientAttachment, serverAttachment->GetUniqueName().c_str(), s_mainPath, 0));
    ASSERT_NE(nullptr, proxyObject);
    EXPECT_EQ(ER_OK, proxyObject->IntrospectRemoteObject());

    ProxyBusObject* comProxy = proxyObject->GetChild("com/UnitTest");
    ASSERT_NE(nullptr, comProxy);
    const InterfaceDescription* comIntf = comProxy->GetInterface(comUnittestInterfaceName);
    ASSERT_NE(nullptr, comIntf);

    qcc::String description;
    ASSERT_TRUE(comIntf->GetMemberDescriptionForLanguage("TestMethod", description, "en"));
    EXPECT_STREQ("English Method Description", description.c_str());
    ASSERT_TRUE(comIntf->GetMemberDescriptionForLanguage("TestMethod", description, "de"));
    EXPECT_STREQ("German Method Description", description.c_str());

    ProxyBusObject* nestedProxy = comProxy->GetChild("Nested");
    ASSERT_NE(nullptr, nestedProxy);
    const InterfaceDescription* nestedIntf = nestedProxy->GetInterface(comUnittestNestedInterfaceName);
    ASSERT_NE(nullptr, nestedIntf);

    ASSERT_TRUE(nestedIntf->GetMemberDescriptionForLanguage("TestMethod", description, "en"));
    EXPECT_STREQ("English Nested Method Description", description.c_str());
    ASSERT_TRUE(nestedIntf->GetMemberDescriptionForLanguage("TestMethod", description, "de"));
    EXPECT_STREQ("German Nested Method Description", description.c_str());
}

TEST_F(IntrospectionCompatibilityTest, IntrospectRemoteObject_FakeLegacyObjectWithoutAllSeenIntrospection_CreatesInterfaceDoesNotCallGetDescriptionLanguages) {
    AJ_PCSTR interfaceName = "org.alljoyn.Bus.TestInterface";

    InterfaceDescription* intf = nullptr;
    ASSERT_EQ(ER_OK, serverAttachment->CreateInterface(interfaceName, intf));
    ASSERT_NE(nullptr, intf);
    ASSERT_EQ(ER_OK, intf->AddProperty("name", "s", PROP_ACCESS_RW));

    const XmlSet noIntrospectionXmls = { s_xmlSingleInterfaceNoAllSeenIntrospection, nullptr, nullptr };
    fakeObject.reset(new FakeLegacyObjectWithoutAllSeenIntrospection(s_mainPath, noIntrospectionXmls));
    ASSERT_NE(nullptr, fakeObject);
    ASSERT_EQ(ER_OK, serverAttachment->RegisterBusObject(*fakeObject));
    ASSERT_EQ(ER_OK, serverAttachment->Connect());

    proxyObject.reset(new ProxyBusObject(*clientAttachment, serverAttachment->GetUniqueName().c_str(), s_mainPath, 0));
    ASSERT_NE(nullptr, proxyObject);
    EXPECT_EQ(ER_OK, proxyObject->IntrospectRemoteObject());

    const InterfaceDescription* remoteIntf = proxyObject->GetInterface(interfaceName);
    EXPECT_NE(nullptr, remoteIntf);
}

TEST_F(IntrospectionCompatibilityTest, IntrospectRemoteObject_FakeLegacyObjectWithStandardDbusInterface_CreatesNonDbusInterfaces) {
    AJ_PCSTR lampserviceInterfaceName = "org.allseen.LSF.LampService";
    AJ_PCSTR lampdetailsInterfaceName = "org.allseen.LSF.LampDetails";
    AJ_PCSTR lampstateInterfaceName = "org.allseen.LSF.LampState";

    InterfaceDescription* intf = nullptr;
    ASSERT_EQ(ER_OK, serverAttachment->CreateInterface(lampserviceInterfaceName, intf));
    ASSERT_NE(nullptr, intf);
    ASSERT_EQ(ER_OK, serverAttachment->CreateInterface(lampdetailsInterfaceName, intf));
    ASSERT_NE(nullptr, intf);
    ASSERT_EQ(ER_OK, serverAttachment->CreateInterface(lampstateInterfaceName, intf));
    ASSERT_NE(nullptr, intf);

    const XmlSet xmlWithDbusInterface = { s_xmlLifx, nullptr, nullptr };
    fakeObject.reset(new FakeLegacyObjectWithoutAllSeenIntrospection(s_mainPath, xmlWithDbusInterface));
    ASSERT_NE(nullptr, fakeObject);
    ASSERT_EQ(ER_OK, serverAttachment->RegisterBusObject(*fakeObject));
    ASSERT_EQ(ER_OK, serverAttachment->Connect());

    proxyObject.reset(new ProxyBusObject(*clientAttachment, serverAttachment->GetUniqueName().c_str(), s_mainPath, 0));
    ASSERT_NE(nullptr, proxyObject);
    EXPECT_EQ(ER_OK, proxyObject->IntrospectRemoteObject());

    const InterfaceDescription* remoteIntf = proxyObject->GetInterface(lampserviceInterfaceName);
    EXPECT_NE(nullptr, remoteIntf);
    remoteIntf = proxyObject->GetInterface(lampdetailsInterfaceName);
    EXPECT_NE(nullptr, remoteIntf);
    remoteIntf = proxyObject->GetInterface(lampstateInterfaceName);
    EXPECT_NE(nullptr, remoteIntf);
}