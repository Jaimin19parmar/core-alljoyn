# Copyright AllSeen Alliance. All rights reserved.
#
#    Permission to use, copy, modify, and/or distribute this software for any
#    purpose with or without fee is hereby granted, provided that the above
#    copyright notice and this permission notice appear in all copies.
#
#    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
#    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
#    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

Import('env', 'CheckCXXFlag')
import os

if env['CPU'] != 'universal':
    print "*** Only 'universal' CPU is supported for iOS.  Aborting."
    Exit(1)

# Darwin specific flags
env.Append(CPPDEFINES=['QCC_OS_DARWIN'])

config = Configure(env, custom_tests = { 'CheckCXXFlag' : CheckCXXFlag })
if not config.CheckCXXFlag('-std=c++11'):
   if not config.CheckCXXFlag('-std=c++0x'):
      print '*** Compiler too old to build AllJoyn.  Aborting.'
      Exit(1)
env = config.Finish()

# Debug/Release Variants
if env['VARIANT'] == 'debug':
   env.Append(CFLAGS='-g')
   env.Append(CXXFLAGS='-g')
   env.Append(JAVACFLAGS='-g -Xlint -Xlint:-serial')
   print 'Using debug settings for iOS build...'
else:
   env.Append(CFLAGS='-Os')
   env.Append(CXXFLAGS='-Os')
   env.Append(LINKFLAGS='')
   env.Append(JAVACFLAGS='-Xlint -Xlint:-serial')
   print 'Using release settings for iOS build...'

vars = Variables()
vars.Add(PathVariable('SDKROOT', ' Base directory of Mac/iOS SDK for target', os.environ.get('SDKROOT')))
vars.Add(PathVariable('SYSTEM_DEVELOPER_DIR', ' Base directory for developer tools', os.environ.get('SYSTEM_DEVELOPER_DIR')))
vars.Update(env)
Help(vars.GenerateHelpText(env))

# Verify dependencies
if '' == env.subst('$SDKROOT'):
   print 'SDKROOT variable is required'
   if not GetOption('help'):
      Exit(1)

if '' == env.subst('$SYSTEM_DEVELOPER_DIR'):
    env['SYSTEM_DEVELOPER_DIR'] = '/Developer'

# Darwin on ARM (aka. iOS) specific defines
env.Append(CPPDEFINES=['QCC_OS_IPHONE'])

s = os.environ.get('CONFIGURATION')
s = s.lower()
env['OBJDIR'] = '#build/${OS}/${CPU}/' + os.environ.get('PLATFORM_NAME') + '/' + s + '/obj'
env['DISTDIR'] = '#build/${OS}/${CPU}/' + os.environ.get('PLATFORM_NAME') + '/' + s + '/dist'
env['TESTDIR'] = '#build/${OS}/${CPU}/' + os.environ.get('PLATFORM_NAME') + '/' + s + '/test'

env['IPHONEOS_PLATFORM_DIR'] = '$SYSTEM_DEVELOPER_DIR/Platforms/iPhoneOS.platform'

env['PATH'] = '$DT_TOOLCHAIN_DIR/usr/bin:$IPHONE_OS_PLATFORM_DIR/Developer/usr/bin:$SYSTEM_DEVELOPER_DIR/usr/bin:$PATH'

env['CC'] = '$DT_TOOLCHAIN_DIR/usr/bin/clang'
env['CXX'] = '$DT_TOOLCHAIN_DIR/usr/bin/clang++'

env.Append(CFLAGS=[
            '-Wall',
            '-pipe',
            '-std=c99',
            '-fno-strict-aliasing',
            '-Wno-long-long',
            '-fdiagnostics-show-category=id',
            '-fdiagnostics-parseable-fixits',
            '-fpascal-strings',
            '-Wreturn-type',
            '-Wparentheses',
            '-Wswitch',
            '-Wno-unused-parameter',
            '-Wunused-variable',
            '-Wunused-value'])

env.Append(CXXFLAGS=['-Wall',
                     '-Werror=non-virtual-dtor',
                     '-pipe',
                     '-fno-exceptions',
                     '-fno-strict-aliasing',
                     '-Wno-deprecated'])

env.Append(CXXFLAGS=['-Wall',
                     '-Werror=non-virtual-dtor',
                     '-pipe',
                     '-fno-exceptions',
                     '-fno-strict-aliasing',
                     '-Wno-deprecated',
                     '-Wc++11-extensions'])

if os.environ.get('PLATFORM_NAME') == 'iphonesimulator':
    print 'Using flags for iOS simulator...'
    env.Append(CPPDEFINES=['QCC_OS_IPHONE_SIMULATOR'])
    print env['VARIANT']
    if env['VARIANT'] == 'debug':
        ccld = [
                '-g',
                '-arch', 'i386', '-arch', 'x86_64',
                '-miphoneos-version-min=9.0',
                '-fembed-bitcode',
                '-D__IPHONE_OS_VERSION_MIN_REQUIRED=90000',
                '-isysroot', '$SDKROOT'
                ]
        print 'Using iOS debug configuration'
    else:
        ccld = [
                '-arch', 'i386', '-arch', 'x86_64',
                '-miphoneos-version-min=9.0',
                '-fembed-bitcode',
                '-D__IPHONE_OS_VERSION_MIN_REQUIRED=90000',
                '-isysroot', '$SDKROOT'
                ]
        print 'Using iOS release configuration'

else:
    print 'Using flags for iOS devices (universal)...'
    if env['VARIANT'] == 'debug':
        ccld = [
                '-g',
                '-arch', 'arm64', '-arch', 'armv7',
                '-miphoneos-version-min=9.0',
                '-D__IPHONE_OS_VERSION_MIN_REQUIRED=90000',
                '-fembed-bitcode',
                '-isysroot', '$SDKROOT'
                ]
        print 'Using iOS debug configuration'
    else:
        ccld = [
                '-arch', 'arm64', '-arch', 'armv7',
                '-miphoneos-version-min=9.0',
                '-fembed-bitcode',
                '-D__IPHONE_OS_VERSION_MIN_REQUIRED=90000',
                '-isysroot', '$SDKROOT'
                ]
        print 'Using iOS release configuration'

ld = [
      '-framework', 'SystemConfiguration',
      '-framework', 'Foundation'
     ]

env.Append(CXXFLAGS=ccld)
env.Append(CFLAGS=ccld)
env.Append(LINKFLAGS=ccld)
env.Append(LINKFLAGS=ld)

env.Append(CPPDEFINES=['MECHANISM_PIPE'])
env.AppendUnique(LIBS =['stdc++', 'pthread'])
if env['CRYPTO'] == 'openssl':
    env.AppendUnique(LIBS =['crypto', 'ssl'])
    vars = Variables()
    vars.Add(PathVariable('OPENSSL_ROOT', 'Base OpenSSL directory (darwin only)', os.environ.get('OPENSSL_ROOT')))
    vars.Update(env)
    Help(vars.GenerateHelpText(env))
    if '' == env.subst('$OPENSSL_ROOT'):
        # Must specify OPENSSL_ROOT for darwin, arm
        print 'Must specify OPENSSL_ROOT when building for OS=darwin, CPU=arm'
        if not GetOption('help'):
            Exit(1)
    env.Append(CPPPATH = ['$OPENSSL_ROOT/include'])
    env.Append(LIBPATH = ['$OPENSSL_ROOT/build/' + os.environ.get('CONFIGURATION') + '-' + os.environ.get('PLATFORM_NAME')])
    print 'Using OpenSSL crypto'
else:
    print 'Using builtin crypto'
