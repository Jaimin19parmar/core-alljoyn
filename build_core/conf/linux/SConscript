# Copyright AllSeen Alliance. All rights reserved.
#
#    Permission to use, copy, modify, and/or distribute this software for any
#    purpose with or without fee is hereby granted, provided that the above
#    copyright notice and this permission notice appear in all copies.
#
#    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
#    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
#    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# 

Import('env', 'CheckCXXFlag')
import os

# Linux specific vars
vars = Variables()
vars.Add(BoolVariable('GCOV', 'Compile with gcov support', 'no'))
vars.Add(BoolVariable('ASAN', 'Enable Address Sanitizer runtime checks', 'no'))
vars.Add(BoolVariable('TSAN', 'Enable Thread Sanitizer runtime checks', 'no'))
vars.Update(env)

Help(vars.GenerateHelpText(env))

config = Configure(env, custom_tests = { 'CheckCXXFlag' : CheckCXXFlag })
if not config.CheckCXXFlag('-std=c++11'):
   if not config.CheckCXXFlag('-std=c++0x'):
      print '*** Compiler too old to build AllJoyn.  Aborting.'
      Exit(1)
env = config.Finish()

# Linux specific flags
env.Append(CPPDEFINES = ['QCC_OS_LINUX'])
env.Append(CPPDEFINES = ['_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC'])

env.Append(CFLAGS = ['-Wall',
                     '-Werror',
                     '-pipe',
                     '-std=c99',
                     '-fno-strict-aliasing',
                     '-fno-asynchronous-unwind-tables',
                     '-fno-unwind-tables',
                     '-ffunction-sections',
                     '-fdata-sections',
                     '-Wno-long-long',
                     '-Wunused-parameter'])

env.Append(CXXFLAGS = ['-Wall',
                       '-Werror',
                       '-pipe',
                       '-fno-exceptions',
                       '-fno-strict-aliasing',
                       '-fno-asynchronous-unwind-tables',
                       '-fno-unwind-tables',
                       '-ffunction-sections',
                       '-fdata-sections',
                       '-Wno-long-long',
                       '-Wno-deprecated',
                       '-Wno-unknown-pragmas',
                       '-Wunused-parameter'])

env.Append(JAVACFLAGS = ['-Xlint', '-Xlint:-serial'])

# Debug/Release Variants
if env['VARIANT'] == 'debug':
   env.Append(CFLAGS = '-g')
   env.Append(CXXFLAGS = '-g')
   env.Append(JAVACFLAGS = '-g')
else:
   env.Append(CFLAGS = '-Os')
   env.Append(CXXFLAGS = '-Os')
   env.Append(LINKFLAGS = ['-s', '-Wl,--gc-sections'])

if (env['VARIANT'] == 'debug' and env['TSAN'] == 'no' ):
   env.Append(CPPDEFINES = ['_GLIBCXX_DEBUG', '_GLIBCXX_DEBUG_PEDANTIC'])

# Code coverage control
if env['GCOV']:
    env.Append(CCFLAGS = ['-fprofile-arcs', '-ftest-coverage'])
    env.Append(LIBS = ['gcov'])

# Address sanitizer control
if env['ASAN']:
   env.Append(CFLAGS = ['-fno-omit-frame-pointer', '-fsanitize=address'])
   env.Append(CXXFLAGS = ['-fno-omit-frame-pointer', '-fsanitize=address'])
   env.Append(LINKFLAGS = '-fsanitize=address')

env.SConscript('${CPU}/SConscript')

env.AppendUnique(LIBS =['rt', 'stdc++', 'pthread', 'm'])

if env['CRYPTO'] == 'openssl':
    import re
    import subprocess
    import sys
    def check_openssl_11x():
        #subprocess.check_output not available prior to python 2.7
        version=''
        for path in env['LIBPATH']:
           path = str(env.Dir(path))
           try:
               libcryptoso = subprocess.check_output(['find', path, '-maxdepth', '1', '-name', 'libcrypto.so', '-print'])
               libcryptoso = libcryptoso.strip()
               if libcryptoso :
                   version = subprocess.check_output("strings "+libcryptoso+" | grep \"^OpenSSL\s\+[0-9]\+\.[0-9]\+\.\"", shell=True)
               if version:
                   print "\t[Linux]    found Openssl version via LIBPATH"
                   break
           except subprocess.CalledProcessError:
               pass

        #use strings to find libcrypto's OpenSSL version
        if not version:
            try:
                version = subprocess.check_output(['openssl', 'version'])
                print "\t[Linux]    found OpenSSL version via \"openssl version\" cli"
            except subprocess.CalledProcessError:
                pass

        #extract the major and minor numbers
        if version:
            print "\t[Linux]    found "+version
            m = re.search("^OpenSSL\s+([0-9]+)\.([0-9])+\.", version)
            major = m.group(1)
            minor = m.group(2)
            if int(major) >= 1 and int(minor) >= 1:
                return True
        #default
        return False

    env.AppendUnique(LIBS =['crypto', 'ssl'])
    print 'Using OpenSSL crypto'
    #check if OpenSSL libcrypto version is 1.1.x or above
    if sys.version_info < (2, 7):
        msg = "Python 2.7 or greater is required to perform OpenSSL version check\n"
        msg +="If your python version is older and OpenSSL1.1.0 or greater is installed,\n"
        msg +="please consider defining the Macro manually via SCONS cli, i.e:\n"
        msg +="scons CPPPATH=/your/openssl-include-path \\\n"
        msg +="\tLIBPATH=/your/openssl-lib-path \\\n"
        msg +="\tCPPDEFINES=QCC_LINUX_OPENSSL_GT_1_1_X (rest of your options)\n"
        print msg
    else:
        if not 'QCC_LINUX_OPENSSL_GT_1_1_X' in env['CPPDEFINES']:
            if check_openssl_11x():
                env.Append(CPPDEFINES= ['QCC_LINUX_OPENSSL_GT_1_1_X'])
else:
    print 'Using builtin crypto'
