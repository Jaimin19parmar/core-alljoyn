# Copyright AllSeen Alliance. All rights reserved.
#
#    Permission to use, copy, modify, and/or distribute this software for any
#    purpose with or without fee is hereby granted, provided that the above
#    copyright notice and this permission notice appear in all copies.
#
#    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
#    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
#    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# 

import os
Import('env')

# Make alljoyn C++ dist a sub-directory of the alljoyn dist.
env['OBJDIR_EXTERNAL'] = env['OBJDIR'] + '/external'

if env['CRYPTO'] == 'builtin':
    env.Append(CPPPATH = [env.Dir('sha1'), env.Dir('sha2')])

externalenv = env.Clone()

# Variant settings
externalenv.VariantDir('$OBJDIR_EXTERNAL/sha1', 'sha1', duplicate = 0)
externalenv.VariantDir('$OBJDIR_EXTERNAL/sha2', 'sha2', duplicate = 0)

srcs = externalenv.Glob('$OBJDIR_EXTERNAL/sha1/*.c') + externalenv.Glob('$OBJDIR_EXTERNAL/sha2/*.c')

static_objs = externalenv.Object(srcs)

if externalenv['LIBTYPE'] != 'static':
    shared_objs = externalenv.SharedObject(srcs)
else:
    shared_objs = []

libexternal = externalenv.StaticLibrary('$OBJDIR_EXTERNAL/external_static', [static_objs])

ret = (static_objs, shared_objs)

Return('ret')
